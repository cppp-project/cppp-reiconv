/**
 * @file cppp/reiconv.hpp
 * @author ChenPi11
 * @brief reiconv C++ API.
 * @version 3.0.0
 * @copyright Copyright (C) 2023-2024 The C++ Plus Project.
 */
/*
 * This file is part of the cppp-reiconv Library.
 *
 * The cppp-reiconv Library is free software; you can redistribute it
 * and/or modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * The cppp-reiconv Library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the cppp-reiconv Library; see the file LICENSE.
 * If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once
#ifndef _CPPP_REICONV_HPP_
#define _CPPP_REICONV_HPP_

#include "encodings/reiconv.hpp"

#include <cstring>
#include <string>
#include <string_view>

#ifndef _CPPP_API
#define _CPPP_API @CPPP_API@
#endif

#if _MSC_VER >= 1600
#pragma execution_character_set("utf-8")
#endif

namespace reiconv
{
    using reiconv::encoding::Encodings;

    /**
     * @brief Encoding.
     */
    class Encoding
    {
    private:
        /**
         * @brief Encoding index. This is the internal representation of the encoding.
         */
        int _index;

    public:
        /**
         * @brief Find the encoding by name. IANA names are recommended.
         * @throw std::invalid_argument if the encoding is not found.
         */
        _CPPP_API Encoding(const char* const name);

        /**
         * @brief Find the encoding by name. IANA names are recommended.
         * @throw std::invalid_argument if the encoding is not found.
         */
        _CPPP_API Encoding(const std::string& name) : Encoding(name.c_str()) {}

        /**
         * @brief Find the encoding by codepage. Supports Windows and z/OS codepages.
         * @throw std::invalid_argument if the encoding is not found.
         */
        _CPPP_API Encoding(const int codepage);

        /**
         * @brief Find the encoding by index.
         * @throw std::invalid_argument if the encoding is not found.
         */
        constexpr Encoding(const Encodings index) : _index(static_cast<int>(index)) {}

        /**
         * @brief Get the encoding index.
         */
        operator int() const noexcept { return _index; }

        /**
         * @brief Get the encoding name.
         */
        bool operator==(const Encoding other) const noexcept { return _index == other._index; }
    };

    /**
     * @brief Version information.
     */
    struct VersionInfo
    {
        /**
         * @brief Major version.
         */
        int major;

        /**
         * @brief Minor version.
         */
        int minor;

        /**
         * @brief Patch version.
         */
        int patch;
    };

    /**
     * @brief Version infomation.
     */
    extern _CPPP_API VersionInfo version;

    /**
     * @brief Convert flags. Used for open conversion descriptor.
     */
    enum class ConvertFlag
    {
        /**
         * @brief No flags.
         */
        NO_FLAGS = 0,

        /**
         * @brief Discard illegal sequences. Same as iconv(3) '//IGNORE'.
         */
        DISCARD_ILSEQ = 1,
    };

    /**
     * @brief Converts an string from one encoding to another, supports encodings autodetecting.
     *
     * @note Converts a memory region given in encoding FROMCODE to a new memory
     * region in encoding TOCODE. FROMCODE and TOCODE are as for iconv_open(3), we don't support
     * '//IGNORE' and '//TRANSLIT'.
     * malloc/realloc is used to allocate the result.
     *
     * @note This function does not treat zero characters specially.
     * @param from The input buffer encoding.
     * @param to The output buffer encoding.
     * @param input Input buffer.
     * @param strict If false. We will ignore all conversion errors. Same as iconv(3) '//IGNORE'.
     * @return Return the output buffer.
     * @throw std::system_error if an error occurs.
     */
    extern _CPPP_API std::string convert(Encoding from, Encoding to, const std::string_view input, enum ConvertFlag flag = ConvertFlag::NO_FLAGS);

    /**
     * @brief Determine the current locale's character encoding.
     * @note The result is statically allocated.
     * @return The canonicalized encoding name.
     */
    extern _CPPP_API std::string_view locale_charset();

} // namespace reiconv

#endif // _CPPP_REICONV_HPP_
